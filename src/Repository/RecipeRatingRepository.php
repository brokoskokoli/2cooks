<?php

namespace App\Repository;

use App\Entity\Recipe;
use App\Entity\RecipeRating;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;

/**
 * RecipeRatingRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class RecipeRatingRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, RecipeRating::class);
    }

    public function disableAllOldRatings(Recipe $recipe, User $user)
    {
        $query = $this->getEntityManager()
            ->createQuery('
                UPDATE App:RecipeRating rr
                SET rr.enabled = 0
                WHERE rr.author = :user
                AND rr.recipe = :recipe
            ')
        ;
        $query->execute([
            'user' => $user->getId(),
            'recipe' => $recipe->getId(),
        ]);
    }

    public function getRatingFromUser(Recipe $recipe, User $user) : ?RecipeRating
    {
        $queryBuilder = $this->createQueryBuilder('rr');
        $queryBuilder->andWhere('rr.author = :user');
        $queryBuilder->andWhere('rr.recipe = :recipe');
        $queryBuilder->andWhere('rr.enabled = 1');
        $queryBuilder->setParameter('user', $user);
        $queryBuilder->setParameter('recipe', $recipe);
        $queryBuilder->orderBy('rr.createdAt', 'DESC');
        $queryBuilder->setMaxResults(1);

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Recipe $recipe
     * @return RecipeRating[]|array
     */
    public function getRatingGlobal(Recipe $recipe) : array
    {
        $queryBuilder = $this->createQueryBuilder('rr');
        $queryBuilder->andWhere('rr.recipe = :recipe');
        $queryBuilder->setParameter('recipe', $recipe);
        $queryBuilder->orderBy('rr.createdAt', 'DESC');
        $queryBuilder->groupBy('rr, rr.author');
        $queryBuilder->andWhere('rr.enabled = 1');

        return $queryBuilder->getQuery()->getResult();
    }
}
